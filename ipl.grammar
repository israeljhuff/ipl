###############################################################################
# Israel's Programming Language (IPL)
# grammar definition
# Author: Israel Huff
# https://github.com/israeljhuff/ipl
###############################################################################

# root of parse tree ##########################################################
program                       : wscm* ((class | flow_control | function_def | scope | statement) wscm*)*;

# whitespace ##################################################################
ws                    discard : [ \n\r\t];
comment               discard : "#" [^\r\n]*;
wscm                  discard : ws | comment;

# class #######################################################################
class                         : class_keyword wscm* identifier wscm* (class_subclass_sep wscm* identifier wscm*)?
                                class_open wscm*
                                (class_access_spec wscm+ (statement_decl_vars | function_def) wscm*)*
                                class_close;
class_keyword         discard : "class";
class_subclass_sep    discard : ":";
class_access_spec             : "public" | "protected" | "private";
class_open            discard : "{";
class_close           discard : "}";

# flow control ################################################################
flow_control          mergeup : if_elif_else_block | loop_block;

if_elif_else_block    mergeup : if_scope (wscm* elif_scope)* (wscm* else_scope)?;
if_scope                      : "if" if_cond_open expr_non_assign if_cond_close scope;
elif_scope                    : "elif" if_cond_open expr_non_assign if_cond_close scope;
else_scope                    : "else" wscm* scope;
if_cond_open          discard : wscm* "(" wscm*;
if_cond_close         discard : wscm* ")" wscm*;

loop_block                    : loop_keyword ((wscm+ "post") | wscm*)
                                (
                                 loop_open
                                 loop_init? loop_sep loop_check? loop_sep loop_update?
                                 loop_close
                                )?
                                wscm*
                                scope;
loop_keyword          discard : "loop";
loop_open             discard : wscm* "(" wscm*;
loop_close            discard : wscm* ")" wscm*;
loop_sep              discard : wscm* ";" wscm*;
loop_init                     : scope | expr_declare_vars | expr_assign_multiple | expr_non_assign;
loop_check                    : expr_non_assign;
loop_update                   : scope | expr_assign_multiple | expr_non_assign;

# function (method) ###########################################################
function_def                  : (type | expr_decl_vector_type | expr_decl_map_type | identifier) wscm+
                                identifier wscm*
                                func_params_open wscm*
                                (func_def_param wscm* (func_params_sep wscm* func_def_param wscm*)*)?
                                func_params_close wscm*
                                scope_open wscm*
                                ((flow_control | scope | statement) wscm*)*
                                scope_close;
func_def_param                : (type | expr_decl_vector_type | expr_decl_map_type | identifier) wscm+ identifier;

function_call                 : identifier wscm* (func_reference_sep wscm* identifier wscm*)*
                                func_params_open wscm*
                                (expr_non_assign wscm* (func_params_sep wscm* expr_non_assign wscm*)*)?
                                func_params_close wscm*;

func_reference_sep    discard : ".";
func_params_sep       discard : ",";
func_params_open      discard : "(";
func_params_close     discard : ")";

# scope #######################################################################
scope                         : scope_open wscm* ((flow_control | scope | statement) wscm*)* scope_close;
scope_open            discard : "{";
scope_close           discard : "}";

# statement ###################################################################
statement                     : expression wscm* statement_term;
statement_decl_vars           : expr_declare_vars wscm* statement_term;
statement_term        discard : ";";

# expressions #################################################################
expression                    : expr_flow_control | expr_declare_vars | expr_assign_multiple | expr_non_assign | group;

expr_declare_vars             : (type | expr_decl_vector_type | expr_decl_map_type | identifier)
                                wscm+ expr_decl_vars_part (wscm* expr_decl_sep wscm* expr_decl_vars_part)*;
expr_decl_vars_part           : identifier wscm* op_decl_assign wscm* expr_non_assign;

expr_decl_vector_type         : "vector"
                                wscm* expr_decl_open wscm*
                                (type | expr_decl_vector_type | expr_decl_map_type | identifier)
                                wscm* expr_decl_close;

expr_decl_map_type            : "map"
                                wscm* expr_decl_open wscm*
                                (type | identifier) wscm* expr_decl_sep wscm*
                                (type | expr_decl_vector_type | expr_decl_map_type | identifier)
                                wscm* expr_decl_close;

expr_decl_sep         discard : ",";
expr_decl_open        discard : "<";
expr_decl_close       discard : ">";

expr_assign_multiple          : expr_assign_mult_part (wscm* expr_assign_mult_sep wscm* expr_assign_mult_part)*;
expr_assign_mult_part         : identifier expr_assign_index* wscm* op_assign wscm* expr_non_assign;
expr_assign_mult_sep  discard : ",";
expr_assign_index             : wscm* expr_assign_index_open wscm* expr_non_assign wscm* expr_assign_index_close wscm*;
expr_assign_index_open discard : "[";
expr_assign_index_close discard : "]";

expr_non_assign               : expr_na_part operand expr_assign_index* (wscm* op_binary wscm* expr_na_part operand expr_assign_index*)*;
expr_na_part                  : typecast? wscm* op_unary? wscm* typecast? wscm*;

expr_flow_control             : "break" wscm* expr_non_assign? | "continue" | "return" wscm* expr_non_assign?;

operand                       : function_call | literal | identifier | group | regex;

group                         : group_open expr_non_assign group_close;
group_open            discard : "(" wscm*;
group_close           discard : wscm* ")";

identifier                    : identifier_contents;
identifier_contents    inline : [A-Za-z_][0-9A-Za-z_]*;
literal                       : bool | float | integer | strings | literal_vector | literal_map;

# types #######################################################################
type                          : "sint8"  | "uint8"  |
                                "sint16" | "uint16" |
                                "sint32" | "uint32" |
                                "sint64" | "uint64" |
                                "fp32"   | "fp64"   |
                                "bool"   |
                                "string" |
                                "void";

typecast                      : typecast_open wscm* (type | identifier) wscm* typecast_close;
typecast_open         discard : "(";
typecast_close        discard : ")";

# operators ###################################################################
op_decl_assign                : "=";
op_unary                      : op_arithmetic_unary | op_logical_unary;
op_binary                     : op_logical_binary | op_arithmetic_binary | op_compare;
op_arithmetic_unary           : "-" | "~";
op_arithmetic_binary          : "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>";
op_assign                     : "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | op_assign_simple;
op_assign_simple              : "=";
op_logical_unary              : "!";
op_logical_binary             : "&&" | "||";
op_compare                    : "==" | "!=" | "<=" | ">=" | "<" | ">" | "=~" | "!~";

# simple Perl-like regex syntax ###############################################
regex                         : re_open_close re_alternates re_open_close;
re_open_close         discard : "/";
re_alternates                 : re_alt (re_alt_sep re_alt)*;
re_alt_sep            discard : "|";
re_alt                        : re_part+;
re_part                       : (ch_class | re_group | re_char) re_quantifier?;
re_char                       : [\u0020-\U0010ffff!/!\\!(!)!*!+!?!\[!|] | esc_re_char;
re_group                      : re_group_open re_alternates re_group_close;
re_group_open         discard : "(";
re_group_close        discard : ")";
re_quantifier                 : "*" | "+" | "?";

# character class for regular expressions
ch_class                      : ch_class_open ch_class_neg? ch_class_range* ch_class_close;
ch_class_open         discard : "[";
ch_class_neg                  : "^";
ch_class_close        discard : "]";
ch_class_range                : ch_class_range_neg? ch_class_char (ch_class_range_sep ch_class_char)?;
ch_class_range_neg            : "!";
ch_class_range_sep    discard : "-";
ch_class_char          inline : [\u0020-\U0010ffff!\\!\]] | esc_ch_class_char;

# double-quoted strings #######################################################
strings                       : strings_part (wscm* strings_part)*;
strings_part          mergeup : string_quote string_chars string_quote;
string_quote          discard : "\"";
string_chars           inline : string_char*;
string_char            inline : [\u0020-\U0010ffff!"!\\] | esc_string_char;

# escape and unicode characters ###############################################
esc_ch_class_char      inline : "\\" ([\!\-\[\\\]\^abfnrtv] | unicode);
esc_re_char            inline : "\\" ([$()*+./?\[\\\]\^abfnrtv|] | unicode);
esc_string_char        inline : "\\" (["\\abfnrtv] | unicode);
unicode                inline : "u" hex hex hex hex | "U00" hex hex hex hex hex hex;
hex                    inline : [0-9A-Fa-f];

# numbers #####################################################################
bool                          : "true" | "false";
integer                       : integer_contents;
integer_contents       inline : "0x" hex+ | [+\-]? ([0] | [1-9][0-9]*);

# approximating C float syntax
float                         : float_contents;
float_contents         inline : [+\-]?
                                (
                                  [0-9]+ exponent
                                  |
                                  [0-9]+[.][0-9]* exponent?
                                  |
                                  [0-9]*[.][0-9]+ exponent?
                                );
exponent               inline : [eE][+\-]?[0-9]+;

# literal vector ##############################################################
literal_vector                : lit_vec_open wscm*
                                (expr_non_assign wscm* (lit_vec_sep wscm* expr_non_assign wscm*)* (lit_vec_sep wscm*)?)?
                                lit_vec_close;
lit_vec_open          discard : "[";
lit_vec_close         discard : "]";
lit_vec_sep           discard : ",";

# literal map #################################################################
literal_map                   : lit_map_open wscm*
                                (lit_map_key_value wscm* (lit_map_sep_elem wscm* lit_map_key_value wscm*)* (lit_map_sep_elem wscm*)?)?
                                lit_map_close;
lit_map_key_value             : expr_non_assign wscm* lit_map_sep_kv wscm* expr_non_assign;
lit_map_open          discard : "[";
lit_map_close         discard : "]";
lit_map_sep_elem      discard : ",";
lit_map_sep_kv        discard : ":";
